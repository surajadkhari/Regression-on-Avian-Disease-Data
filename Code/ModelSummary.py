# -*- coding: utf-8 -*-
"""Analytics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wC8sNjCj3cFDzxvAyzaBoJP5Of5xKmkh
"""

# ðŸ“¦ Import required libraries
from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error

# ðŸ“Š Load and prepare dataset
df = pd.read_csv("/content/drive/MyDrive/Coding/Main_DataSet.csv",encoding='latin-1')
df.columns = df.columns.str.strip()
df["Total"] = pd.to_numeric(df["Total"], errors='coerce')
df["Temperature"] = pd.to_numeric(df["Temperature"], errors='coerce')

# ðŸ§ª Add synthetic Vaccination Rate (as real data was unavailable)
np.random.seed(42)
df["Vaccination Rate (%)"] = np.random.uniform(60, 100, size=len(df))

# ðŸ§¹ Drop rows with missing values
df = df.dropna(subset=["Total", "Temperature"])

# ðŸŽ¯ Define features and target
X = df[["Temperature", "Vaccination Rate (%)"]]
y = df["Total"]

# ðŸ”€ Split into train and test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# ðŸ§  Train the regression model
model = LinearRegression()
model.fit(X_train, y_train)

# ðŸ”® Predict on test data
y_pred = model.predict(X_test)

# ðŸ“Š Evaluate model performance
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("RÂ² Score:", r2)
print("MAE:", mae)
print("RMSE:", rmse)
print("MSE:", mse)

# ðŸ“ˆ Coefficients
coeff_df = pd.DataFrame({
    "Feature": X.columns,
    "Coefficient": model.coef_
})
print(coeff_df)



# ðŸ“¦ Import required libraries
from scipy.stats import ttest_rel
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
import pandas as pd
import numpy as np

# ðŸ§¹ Prepare data
df = pd.read_csv("/content/drive/MyDrive/Coding/Main_DataSet.csv",encoding='latin-1')
df.columns = df.columns.str.strip()
df["Total"] = pd.to_numeric(df["Total"], errors='coerce')
df["Temperature"] = pd.to_numeric(df["Temperature"], errors='coerce')
np.random.seed(42)
df["Vaccination Rate (%)"] = np.random.uniform(60, 100, size=len(df))
df = df.dropna(subset=["Total", "Temperature"])

# ðŸŽ¯ Define features and target
X = df[["Temperature", "Vaccination Rate (%)"]]
y = df["Total"]

# ðŸ”€ Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# ðŸ§  Train model
model = LinearRegression()
model.fit(X_train, y_train)

# ðŸ”® Predict
y_pred = model.predict(X_test)

# ðŸ“Š Performance metrics
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

# ðŸ§ª Paired t-test
t_stat, p_value = ttest_rel(y_test, y_pred)

# âœ… Output results
print("RÂ² Score:", r2)
print("MSE:", mse)
print("RMSE:", rmse)
print("MAE:", mae)
print("T-statistic:", t_stat)
print("P-value:", p_value)