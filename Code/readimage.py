# -*- coding: utf-8 -*-
"""ReadImage.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_Kc3DCa8jD0UJFuzbSff51ZPJRq0L258
"""



"""# New section"""

# Install required packages
!sudo apt install tesseract-ocr
!pip install pytesseract pillow opencv-python pandas

from google.colab import drive
drive.mount('/content/drive')
# 3. Paths ‚Äî change these to match your setup
IMAGE_FOLDER = "/content/drive/MyDrive/Coding/Snip"  # ‚Üê your folder
OUTPUT_CSV   = "/content/drive/MyDrive/Coding/Snip.csv"

# 1) Install & import
!apt-get update -qq && apt-get install -y -qq tesseract-ocr
!pip install -q pytesseract opencv-python-headless pandas

import os, re, cv2, pytesseract
import pandas as pd
from google.colab import drive

# 2) Mount Google Drive
drive.mount('/content/drive')


# 4) Fixed headers
HEADERS = [
    "Found dead", "Wasting", "Respiratory", "Other/Unknown",
    "Abnormal faeces or other GIT", "Non-specific", "Nervous",
    "Musculoskeletal&/or Lame", "Recumbent", "Egg drop or Egg quality", "Skin"
]

# 5) Helpers
def extract_category_value(line):
    nums = re.findall(r"\d+", line)
    if not nums:
        return None, None
    value = int(nums[-1])
    text = re.sub(r"[\d:‚Äì‚Äî\-]+", "", line).strip()
    return text, value

def best_character_overlap_match(ocr_text, headers, min_overlap=4):
    s = ocr_text.lower().replace(" ", "")
    best, best_score = None, 0
    for h in headers:
        t = h.lower().replace(" ", "")
        overlap = len(set(s) & set(t))
        if overlap > best_score:
            best_score, best = overlap, h
    return best if best_score >= min_overlap else None

# 6) Collect all (Image, Category, Value) records
records = []

for i in range(1, 55):
    img_name = f"{i}.png"
    img_path = os.path.join(IMAGE_FOLDER, img_name)
    if not os.path.isfile(img_path):
        print(f"‚ö†Ô∏è Missing {img_name}, skipping.")
        continue

    # read + preprocess
    img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)
    blur = cv2.GaussianBlur(img, (3,3), 0)
    _, thresh = cv2.threshold(blur, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)

    # OCR
    text = pytesseract.image_to_string(thresh, config="--oem 3 --psm 6")
    lines = [l for l in text.splitlines() if l.strip()]

    print(f"\n--- {img_name} ---")
    for line in lines:
        cat_text, val = extract_category_value(line)
        if not cat_text or val is None:
            continue
        match = best_character_overlap_match(cat_text, HEADERS)
        if match:
            print(f"{match}: {val}")
            records.append({
                "Image": img_name,
                "Category": match,
                "Value": val
            })
        else:
            print(f"‚úñ Unmatched: '{cat_text}' ‚Üí {val}")

# 7) Build long-form DataFrame
df_long = pd.DataFrame(records)
print("\nAll extracted pairs:")
print(df_long)

# 8) Pivot to wide form
df_wide = df_long.pivot_table(
    index='Image',
    columns='Category',
    values='Value',
    aggfunc='first'
).fillna(0)

# 9) Ensure all headers exist, in order
for h in HEADERS:
    if h not in df_wide.columns:
        df_wide[h] = 0
df_wide = df_wide[HEADERS].reset_index()

# 10) Save to CSV (overwrite or append as you wish)
df_wide.to_csv(OUTPUT_CSV, index=False)
print(f"\nüéâ Done ‚Äî saved to {OUTPUT_CSV}")